buildscript {
  repositories {

    maven {
      url "https://plugins.gradle.org/m2/"
    }

    mavenLocal()
    mavenCentral()

  }
  dependencies {
    classpath "gradle.plugin.edu.sc.seis.gradle:launch4j:2.3.0"
    classpath 'gradle.plugin.edu.sc.seis:macAppBundle:2.1.7'
    classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
  }
}

plugins {
  id 'java'
  id 'application'

  id "edu.sc.seis.macAppBundle" version "2.1.7"
  id "edu.sc.seis.launch4j" version "2.3.0"
  id "com.github.johnrengelman.shadow" version "2.0.1"
}


group = 'ch.retorte.intervalmusiccompositor'
applicationName = "IntervalMusicCompositor"
mainClassName = "ch.retorte.intervalmusiccompositor.Main"

applicationDefaultJvmArgs = ["-Xmx2048m"]

ext.macosxOutputDir = '/macosxApp'
ext.windowsOutputDir = '/windowsApp'
ext.linuxOutputDir = '/linuxApp'
ext.windowsUberJarName = 'uberJar'

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
 }

jar {
    manifest {
        attributes(provider: 'gradle', "Main-Class": mainClassName)
    }
}


// We disable tasks which are not successfully performed on non-OSX hosts.
createDmg.enabled = false

macAppBundle {
  appOutputDir = project.ext.macosxOutputDir
  mainClassName = project.mainClassName
  icon = project(':intervalmusiccompositor.build').file('icons/interval_music_compositor.icns')
  appStyle = 'Oracle'
  appName = project.applicationName
  jvmVersion = "1.8+"
  arguments = ["-Xmx=2048M"]
}

task distOsxApp(type: Tar, dependsOn: createApp) {
  description = "Creates an archive from the Mac OS X version." 
  compression = Compression.GZIP
  baseName = project.applicationName + '-macosx'

  into (project.applicationName + '-' + version) {
    from buildDir.absolutePath + project.ext.macosxOutputDir
    from project(':intervalmusiccompositor.app').files('src/main/resources/CHANGELOG.txt')
    from project(':intervalmusiccompositor.build').files('documentation/')
  }
}

shadowJar {
  baseName = project.ext.windowsUberJarName
  classifier = null
  version = null
}

task copyUberJar(type: Copy, dependsOn: [ shadowJar]) {
  from project.tasks.shadowJar.outputs.files
  into buildDir.absolutePath + project.ext.windowsOutputDir + '/lib'
}

task distWindowsApp(type: Zip, dependsOn: [shadowJar, copyUberJar, createExe]) {
  description = "Creates an archive from the Microsoft Windows version." 
  baseName = applicationName + '-windows'
  
  into (applicationName + '-' + version) {
    from buildDir.absolutePath + project.ext.windowsOutputDir + '/' + applicationName + '.exe'
    from project(':intervalmusiccompositor.app').files('src/main/resources/CHANGELOG.txt')
    from project(':intervalmusiccompositor.build').files('documentation/')
  }
}

task distLinuxApp(type: Tar, dependsOn: installDist) {
  description = "Creates an archive from the Linux version."
  compression = Compression.GZIP
  baseName = applicationName + '-linux'
  extension = 'tar.gz'
  
  into (applicationName + '-' + version) {
    from installDist.outputs
    from project(':intervalmusiccompositor.build').file('icons/interval_music_compositor.svg')
    from project(':intervalmusiccompositor.app').files('src/main/resources/CHANGELOG.txt')
    from project(':intervalmusiccompositor.build').files('documentation/')
  }
}

task distAll(dependsOn: [distOsxApp, distWindowsApp, distLinuxApp]) {
  description = "Creates archives for all supported operating systems."
}

launch4j {
    outputDir = project.ext.windowsOutputDir
    mainClassName = project.mainClassName
    icon = project(':intervalmusiccompositor.build').file('icons/interval_music_compositor.ico')

    jreMinVersion = '1.8.0_60'
    version = project.version

    downloadUrl = "http://www.java.com/download/"
    supportUrl = "https://nwaldispuehl.github.io/interval-music-compositor/en/feedback_support"
  
    copyConfigurable = project.tasks.shadowJar.outputs.files
    jar = project.tasks.shadowJar.outputs.files.first()

    outfile = project.applicationName + '.exe'
    copyright = "retorte.ch"
    maxHeapSize = 1280
}

dependencies {
  compile project(':intervalmusiccompositor.spi')
  compile project(':intervalmusiccompositor.model')
  
	compile project(':intervalmusiccompositor.core')
	compile project(':intervalmusiccompositor.fxUi')

  compile project(':intervalmusiccompositor.soundeffects')

	compile project(':intervalmusiccompositor.beatroot')
	
	compile project(':intervalmusiccompositor.decoder.wave')
	compile project(':intervalmusiccompositor.decoder.flac')
	compile project(':intervalmusiccompositor.decoder.mp3')
	compile project(':intervalmusiccompositor.decoder.ogg')
	compile project(':intervalmusiccompositor.decoder.aac')
	
	compile project(':intervalmusiccompositor.encoder.wave')
	compile project(':intervalmusiccompositor.encoder.mp3')
  compile project(':intervalmusiccompositor.encoder.ogg')
}



