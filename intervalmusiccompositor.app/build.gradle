plugins {
  id 'application'

  id "org.openjfx.javafxplugin" version "0.0.10"
  id 'org.beryx.jlink' version '2.24.4'

  id "nebula.ospackage" version "9.0.0"
}

group = 'ch.retorte.intervalmusiccompositor'
applicationName = "IntervalMusicCompositor"
mainClassName = "intervalmusiccompositor.app/ch.retorte.intervalmusiccompositor.Main"

apply plugin: 'application'
application {
  mainClass = "ch.retorte.intervalmusiccompositor.Main"
  mainModule = "intervalmusiccompositor.app"
}

ext.versionDelimiter = '-'

ext.debPackageInstallPath = '/opt/IntervalMusicCompositor'

ext.moduleName = 'intervalmusiccompositor.app'

jar {
    manifest {
        attributes(
            provider : 'gradle',
            'Main-Class' : mainClassName,
            'Application-Name' : applicationName
        )
    }
}

javafx {
  modules = [ 'javafx.base', 'javafx.graphics', 'javafx.controls', 'javafx.fxml',  'javafx.swing' ]
}

jlink {
  targetPlatform("linux-amd64") {
    jdkHome = "/opt/java/platforms/linux/x64/jdk-17.0.5+8"
    addExtraModulePath("/opt/openjfx/linux/x64/javafx-jmods-17.0.1")
  }

  targetPlatform("mac-x86_64") {
    jdkHome = "/opt/java/platforms/mac/x64/jdk-17.0.5+8"
    addExtraModulePath("/opt/openjfx/mac/x64/javafx-jmods-17.0.1")
  }

  targetPlatform("mac-aarch64") {
    jdkHome = "/opt/java/platforms/mac/aarch64/jdk-17.0.5+8"
    addExtraModulePath("/opt/openjfx/mac/aarch64/javafx-jmods-17.0.1")
  }

  targetPlatform("win-amd64") {
    jdkHome = "/opt/java/platforms/win/x64/jdk-17.0.5+8"
    addExtraModulePath("/opt/openjfx/win/x64/javafx-jmods-17.0.1")
  }
}

task buildLinuxUpdater(type: Exec, dependsOn: 'jlink') {
  workingDir project(':intervalmusiccompositor.updater').file('native-src')
  commandLine 'cargo', 'build', '--release', '--target', 'x86_64-unknown-linux-gnu'
}

task copyLinuxUpdater(type: Copy, dependsOn: 'buildLinuxUpdater') {
  from project(':intervalmusiccompositor.updater').files('native-src/target/x86_64-unknown-linux-gnu/release/')
  into(buildDir.absolutePath + '/image/intervalmusiccompositor.app-linux-amd64/bin')
  include('intervalmusiccompositor-updater')
}

task buildMacUpdater(type: Exec, dependsOn: 'jlink') {
  workingDir project(':intervalmusiccompositor.updater').file('native-src')
  commandLine 'cargo', 'build', '--release', '--target', 'x86_64-apple-darwin'
}

task copyMacUpdater(type: Copy, dependsOn: 'buildMacUpdater') {
  from project(':intervalmusiccompositor.updater').files('native-src/target/x86_64-apple-darwin/release/')
  into(buildDir.absolutePath + '/image/intervalmusiccompositor.app-mac-x86_64/bin')
  include('intervalmusiccompositor-updater')
}

task buildMacAarch64Updater(type: Exec, dependsOn: 'jlink') {
  workingDir project(':intervalmusiccompositor.updater').file('native-src')
  commandLine 'cargo', 'build', '--release', '--target', 'aarch64-apple-darwin'
}

task copyMacAarch64Updater(type: Copy, dependsOn: 'buildMacAarch64Updater') {
  from project(':intervalmusiccompositor.updater').files('native-src/target/aarch64-apple-darwin/release/')
  into(buildDir.absolutePath + '/image/intervalmusiccompositor.app-mac-aarch64/bin')
  include('intervalmusiccompositor-updater')
}

task buildWinUpdater(type: Exec, dependsOn: 'jlink') {
  workingDir project(':intervalmusiccompositor.updater').file('native-src')
  commandLine 'cargo', 'build', '--release', '--target', 'x86_64-pc-windows-gnu'
}

task copyWinUpdater(type: Copy, dependsOn: 'buildWinUpdater') {
  from project(':intervalmusiccompositor.updater').files('native-src/target/x86_64-pc-windows-gnu/release/')
  into(buildDir.absolutePath + '/image/intervalmusiccompositor.app-win-amd64/bin')
  include('intervalmusiccompositor-updater.exe')
}

task distOsxApp(type: Zip, dependsOn: 'copyMacUpdater') {
  description = "Creates an archive from the Mac OS X version."

  archiveBaseName = applicationName
  archiveAppendix = 'mac-x86_64'

  into (project.applicationName) {
    from buildDir.absolutePath + '/image/intervalmusiccompositor.app-mac-x86_64'
    from project(':intervalmusiccompositor.app').files('src/main/resources/CHANGELOG.txt')
    from project(':intervalmusiccompositor.build').files('documentation/')
  }
}

task distOsxAarch64App(type: Zip, dependsOn: 'copyMacAarch64Updater') {
  description = "Creates an archive from the Mac OS X version."

  archiveBaseName = applicationName
  archiveAppendix = 'mac-aarch64'

  into (project.applicationName) {
    from buildDir.absolutePath + '/image/intervalmusiccompositor.app-mac-aarch64'
    from project(':intervalmusiccompositor.app').files('src/main/resources/CHANGELOG.txt')
    from project(':intervalmusiccompositor.build').files('documentation/')
  }
}

task distWindowsApp(type: Zip, dependsOn: 'copyWinUpdater') {
  description = "Creates an archive from the Microsoft Windows version."

  archiveBaseName = applicationName
  archiveAppendix = 'win-amd64'

  into (applicationName) {
    from buildDir.absolutePath + '/image/intervalmusiccompositor.app-win-amd64'
    from project(':intervalmusiccompositor.app').files('src/main/resources/CHANGELOG.txt')
    from project(':intervalmusiccompositor.build').files('documentation/')
  }
}

task distLinuxApp(type: Zip, dependsOn: 'copyLinuxUpdater') {
  description = "Creates an archive from the Linux version."

  archiveBaseName = applicationName
  archiveAppendix = 'linux-amd64'

  into (applicationName) {
    from buildDir.absolutePath + '/image/intervalmusiccompositor.app-linux-amd64'
    from project(':intervalmusiccompositor.build').file('icons/interval_music_compositor.svg')
    from project(':intervalmusiccompositor.app').files('src/main/resources/CHANGELOG.txt')
    from project(':intervalmusiccompositor.build').files('documentation/')
  }
}

apply plugin: 'nebula.deb'

task distDebPackage(type: Deb, dependsOn: 'copyLinuxUpdater') {
  packageName 'intervalmusiccompositor'
  summary 'Application to create music intervals (e.g. 20 s music, 10 s break) for sports and education.'
  arch 'amd64'

  // Collect needed files
  into project.ext.debPackageInstallPath
  from buildDir.absolutePath + '/image/intervalmusiccompositor.app-linux-amd64'
  from project(':intervalmusiccompositor.build').file('icons/interval_music_compositor.svg')
  from project(':intervalmusiccompositor.build').file('os_scripts/freedesktop/intervalmusiccompositor.desktop')
  from project(':intervalmusiccompositor.app').files('src/main/resources/CHANGELOG.txt')
  from project(':intervalmusiccompositor.build').files('documentation/')

  // Symbolic links for the application and the desktop starter
  link('/usr/bin/intervalmusiccompositor', project.ext.debPackageInstallPath + '/bin/intervalmusiccompositor.app')
  link('/usr/share/applications/intervalmusiccompositor.desktop', project.ext.debPackageInstallPath + '/intervalmusiccompositor.desktop')
}

task renameDebPackage (type: Copy, dependsOn: distDebPackage) {
  from project.tasks.distDebPackage.outputs.files
  into distsDirectory
  rename { String fileName ->
    fileName.replace("intervalmusiccompositor", "IntervalMusicCompositor-linux")
  }
}

task distAll(dependsOn: [distOsxApp, distOsxAarch64App, distWindowsApp, distLinuxApp, renameDebPackage]) {
  description = "Creates archives for all supported operating systems."
}

dependencies {
  implementation project(':intervalmusiccompositor.spi')
  implementation project(':intervalmusiccompositor.model')

  implementation project(':intervalmusiccompositor.commons')
  implementation project(':intervalmusiccompositor.commons.audio')

  implementation project(':intervalmusiccompositor.core')
  implementation project(':intervalmusiccompositor.ui.fx')

  implementation project(':intervalmusiccompositor.soundeffects')

  implementation project(':intervalmusiccompositor.beatroot')

  implementation project(':intervalmusiccompositor.decoder.wave')
  implementation project(':intervalmusiccompositor.decoder.flac')
  implementation project(':intervalmusiccompositor.decoder.mpeg')
  implementation project(':intervalmusiccompositor.decoder.ogg')
  implementation project(':intervalmusiccompositor.decoder.aac')

  implementation project(':intervalmusiccompositor.encoder.wave')
  implementation project(':intervalmusiccompositor.encoder.mpeg')
  implementation project(':intervalmusiccompositor.encoder.ogg')
}



