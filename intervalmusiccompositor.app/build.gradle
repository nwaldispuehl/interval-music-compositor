plugins {
  id 'application'

  // TODO: upgrade...
  id "edu.sc.seis.macAppBundle" version "2.3.0"
  id "edu.sc.seis.launch4j" version "2.4.4"
  id "com.github.johnrengelman.shadow" version "4.0.3"
  id "nebula.deb" version "5.1.0"
}

group = 'ch.retorte.intervalmusiccompositor'
applicationName = "IntervalMusicCompositor"
mainClassName = "intervalmusiccompositor.app/ch.retorte.intervalmusiccompositor.Main"

applicationDefaultJvmArgs = ["-Xmx2048m"]

ext.versionDelimiter = '-'

ext.macosxOutputDir = '/macApp'
ext.windowsOutputDir = '/winApp'
ext.linuxOutputDir = '/linuxApp'
ext.windowsUberJarName = 'uberJar'
ext.debPackageInstallPath = '/opt/IntervalMusicCompositor'

ext.moduleName = 'intervalmusiccompositor.app'

jar {
    manifest {
        attributes(
            provider : 'gradle',
            'Main-Class' : mainClassName,
            'Application-Name' : applicationName
        )
    }
}


// We disable tasks which are not successfully performed on non-OSX hosts.
createDmg.enabled = false

macAppBundle {
  appOutputDir = project.ext.macosxOutputDir
  mainClassName = project.mainClassName
  icon = project(':intervalmusiccompositor.build').file('icons/interval_music_compositor.icns')
  appStyle = 'Oracle'
  appName = project.applicationName
  jvmVersion = "1.8+"
  jreHome = '...'
  arguments = ["-Xmx=2048M"]
}

task distOsxApp(type: Tar, dependsOn: createApp) {
  description = "Creates an archive from the Mac OS X version." 
  compression = Compression.GZIP
  baseName = project.applicationName
  appendix = 'mac'

  into (project.applicationName + project.ext.versionDelimiter + version) {
    from buildDir.absolutePath + project.ext.macosxOutputDir
    from project(':intervalmusiccompositor.app').files('src/main/resources/CHANGELOG.txt')
    from project(':intervalmusiccompositor.build').files('documentation/')
  }
}

shadowJar {
  baseName = project.ext.windowsUberJarName
  mainClassName = project.mainClassName
  classifier = null
  version = null
}

task copyUberJar(type: Copy, dependsOn: [ shadowJar]) {
  from project.tasks.shadowJar.outputs.files
  into buildDir.absolutePath + project.ext.windowsOutputDir + '/lib'
}

task distWindowsApp(type: Zip, dependsOn: [shadowJar, copyUberJar, createExe]) {
  description = "Creates an archive from the Microsoft Windows version." 
  baseName = applicationName
  appendix = 'win'

  into (applicationName + project.ext.versionDelimiter + version) {
    from buildDir.absolutePath + project.ext.windowsOutputDir + '/' + applicationName + '.exe'
    from project(':intervalmusiccompositor.app').files('src/main/resources/CHANGELOG.txt')
    from project(':intervalmusiccompositor.build').files('documentation/')
  }
}

task distLinuxApp(type: Tar, dependsOn: installDist) {
  description = "Creates an archive from the Linux version."
  compression = Compression.GZIP
  baseName = applicationName
  appendix = 'linux'
  extension = 'tar.gz'
  
  into (applicationName + project.ext.versionDelimiter + version) {
    from installDist.outputs
    from project(':intervalmusiccompositor.build').file('icons/interval_music_compositor.svg')
    from project(':intervalmusiccompositor.app').files('src/main/resources/CHANGELOG.txt')
    from project(':intervalmusiccompositor.build').files('documentation/')
  }
}

task distDebPackage(type: Deb, dependsOn: installDist) {

  packageName 'intervalmusiccompositor'
  summary 'Application to create music intervals (e.g. 20 s music, 10 s break) for sports and education.'

  // Dependencies

  requires('openjdk-11-jre')

  // Collect needed files

  into project.ext.debPackageInstallPath
  from (installDist.outputs)
  from project(':intervalmusiccompositor.build').file('icons/interval_music_compositor.svg')
  from project(':intervalmusiccompositor.build').file('os_scripts/freedesktop/intervalmusiccompositor.desktop')
  from project(':intervalmusiccompositor.app').files('src/main/resources/CHANGELOG.txt')
  from project(':intervalmusiccompositor.build').files('documentation/')


  // Symbolic links for the application and the desktop starter

  link('/usr/bin/intervalmusiccompositor', project.ext.debPackageInstallPath + '/bin/IntervalMusicCompositor')
  link('/usr/share/applications/intervalmusiccompositor.desktop', project.ext.debPackageInstallPath + '/intervalmusiccompositor.desktop')
}

task renameDebPackage (type: Copy, dependsOn: distDebPackage) {
  from project.tasks.distDebPackage.outputs.files
  into distsDir
  rename { String fileName ->
    fileName.replace("intervalmusiccompositor", "IntervalMusicCompositor-linux")
  }
}


task distJarFile(type: Copy, dependsOn: shadowJar) {
  from project.tasks.shadowJar.outputs.files
  into distsDir
  rename { String fileName ->
    fileName.replace("uberJar", applicationName + project.ext.versionDelimiter + version)
  }
}

task distAll(dependsOn: [distOsxApp, distWindowsApp, distLinuxApp, renameDebPackage, distJarFile]) {
  description = "Creates archives for all supported operating systems."
}

launch4j {
    outputDir = project.ext.windowsOutputDir
    mainClassName = project.mainClassName
    icon = project(':intervalmusiccompositor.build').file('icons/interval_music_compositor.ico')

    jreMinVersion = '1.8.0_60'
    version = project.version

    downloadUrl = "http://www.java.com/download/"
    supportUrl = "https://nwaldispuehl.github.io/interval-music-compositor/en/feedback_support"
  
    copyConfigurable = project.tasks.shadowJar.outputs.files
    jar = project.tasks.shadowJar.outputs.files.first()

    outfile = project.applicationName + '.exe'
    copyright = "retorte.ch"
    maxHeapSize = 1280
}

dependencies {
  implementation project(':intervalmusiccompositor.spi')
  implementation project(':intervalmusiccompositor.model')

  implementation project(':intervalmusiccompositor.core')
  implementation project(':intervalmusiccompositor.ui.swing')

  implementation project(':intervalmusiccompositor.soundeffects')

  implementation project(':intervalmusiccompositor.beatroot')

  implementation project(':intervalmusiccompositor.decoder.wave')
  implementation project(':intervalmusiccompositor.decoder.flac')
  implementation project(':intervalmusiccompositor.decoder.mpeg')
  implementation project(':intervalmusiccompositor.decoder.ogg')
  implementation project(':intervalmusiccompositor.decoder.aac')

  implementation project(':intervalmusiccompositor.encoder.wave')
  implementation project(':intervalmusiccompositor.encoder.mpeg')
  implementation project(':intervalmusiccompositor.encoder.ogg')
}



